import { IpAddressTypes } from './ip-addresses';
import { InstanceConnectionInfo } from './instance-connection-info';
import { InstanceMetadata } from './sqladmin-fetcher';
import { SslCert } from './ssl-cert';
import { AuthTypes } from './auth-types';
interface Fetcher {
    getInstanceMetadata({ projectId, regionId, instanceId, }: InstanceConnectionInfo): Promise<InstanceMetadata>;
    getEphemeralCertificate(instanceConnectionInfo: InstanceConnectionInfo, publicKey: string, authType: AuthTypes): Promise<SslCert>;
}
interface CloudSQLInstanceOptions {
    ipType: IpAddressTypes;
    authType: AuthTypes;
    instanceConnectionName: string;
    sqlAdminFetcher: Fetcher;
}
export declare class CloudSQLInstance {
    static getCloudSQLInstance(options: CloudSQLInstanceOptions): Promise<CloudSQLInstance>;
    private readonly ipType;
    private readonly authType;
    private readonly sqlAdminFetcher;
    private refreshTimeoutID?;
    private closed;
    readonly instanceInfo: InstanceConnectionInfo;
    ephemeralCert?: SslCert;
    host?: string;
    privateKey?: string;
    serverCaCert?: SslCert;
    constructor({ ipType, authType, instanceConnectionName, sqlAdminFetcher, }: CloudSQLInstanceOptions);
    refresh(): Promise<void>;
    close(): void;
}
export {};
//# sourceMappingURL=cloud-sql-instance.d.ts.map